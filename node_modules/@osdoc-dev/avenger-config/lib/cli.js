"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBundleOpts = void 0;
var avenger_shared_1 = require("@osdoc-dev/avenger-shared");
var avenger_utils_1 = require("@osdoc-dev/avenger-utils");
var config_schema_1 = __importDefault(require("./config-schema"));
var validateConfig = function (config) {
    return new Promise(function (resolve, reject) {
        avenger_utils_1.validateSchema(config, config_schema_1.default, function (msg) {
            avenger_utils_1.error("invalid preset options: " + msg);
            reject(msg);
        });
        resolve();
    });
};
var getConfigModule = function (filePath) {
    var module = require(filePath);
    return module.default || module;
};
var getConfigByFile = function (_a) {
    var cwd = _a.cwd;
    try {
        var configFile = avenger_utils_1.getExistFile({
            cwd: cwd,
            files: avenger_shared_1.CLI_CONFIG_FILES,
            returnRelative: false,
        });
        if (!configFile) {
            avenger_utils_1.error("\u672A\u627E\u5230\u914D\u7F6E\u6587\u4EF6,\u8BF7\u68C0\u67E5\u662F\u5426\u5305\u542B" + avenger_shared_1.CLI_CONFIG_FILES.toString() + "\u6587\u4EF6");
            process.exit(1);
        }
        var config = getConfigModule(configFile);
        validateConfig(config);
        return config;
    }
    catch (error) {
        avenger_utils_1.log("get config with file error:" + error.message);
        return {};
    }
};
var getBundleOpts = function (opt) {
    var cwd = opt.cwd, inlineConfig = opt.inlineConfig;
    var entry = avenger_utils_1.getExistFile({ cwd: cwd, files: avenger_shared_1.DEFAULT_FILES, returnRelative: true });
    if (!entry) {
        avenger_utils_1.error("\u672A\u627E\u5230\u6587\u4EF6\u5165\u53E3\uFF0Centry url\uFF1A" + entry);
        process.exit(1);
    }
    var config = getConfigByFile({ cwd: cwd });
    var configRet = avenger_utils_1.lodash.merge(inlineConfig, config);
    if (!configRet.esm && !configRet.cjs && !configRet.umd) {
        avenger_utils_1.error('未找到要输出的格式，请检查配置');
        process.exit(1);
    }
    if (configRet.esm && typeof configRet.esm === 'string')
        configRet.esm = { type: configRet.esm };
    if (configRet.cjs && typeof configRet.cjs === 'string')
        configRet.cjs = { type: configRet.cjs };
    return __assign(__assign({}, configRet), { entry: configRet.entry || entry });
};
exports.getBundleOpts = getBundleOpts;
//# sourceMappingURL=cli.js.map