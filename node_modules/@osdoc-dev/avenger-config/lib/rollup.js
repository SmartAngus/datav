"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRollupConfig = exports.getExternal = void 0;
var path_1 = __importDefault(require("path"));
var fs_1 = require("fs");
var avenger_utils_1 = require("@osdoc-dev/avenger-utils");
var avenger_shared_1 = require("@osdoc-dev/avenger-shared");
var rollup_plugin_terser_1 = require("rollup-plugin-terser");
var plugin_url_1 = __importDefault(require("@rollup/plugin-url"));
var rollup_1 = __importDefault(require("@svgr/rollup"));
var rollup_plugin_typescript2_1 = __importDefault(require("rollup-plugin-typescript2"));
var plugin_json_1 = __importDefault(require("@rollup/plugin-json"));
var plugin_babel_1 = __importDefault(require("@rollup/plugin-babel"));
var plugin_commonjs_1 = __importDefault(require("@rollup/plugin-commonjs"));
var temp_dir_1 = __importDefault(require("temp-dir"));
var plugin_node_resolve_1 = __importDefault(require("@rollup/plugin-node-resolve"));
var plugin_replace_1 = __importDefault(require("@rollup/plugin-replace"));
var plugin_inject_1 = __importDefault(require("@rollup/plugin-inject"));
var rollup_plugin_postcss_1 = __importDefault(require("rollup-plugin-postcss"));
var autoprefixer_1 = __importDefault(require("autoprefixer"));
var less_plugin_npm_import_1 = __importDefault(require("less-plugin-npm-import"));
var babel_1 = require("./babel");
function getExternal(opts) {
    var pkgFile = path_1.default.join(opts.cwd, 'package.json');
    if (!fs_1.existsSync(pkgFile))
        return [];
    var pkg = JSON.parse(fs_1.readFileSync(pkgFile, 'utf-8'));
    return __spreadArray(__spreadArray([], (opts.formatType !== avenger_shared_1.BundleOutTypeMap.umd ? Object.keys(pkg.dependencies || {}) : [])), Object.keys(pkg.peerDependencies || {}));
}
exports.getExternal = getExternal;
var getRollupConfig = function (opt) {
    var _a, _b, _c;
    var _d = opt || {}, cwd = _d.cwd, entry = _d.entry, type = _d.type, buildConfig = _d.buildConfig;
    var _e = buildConfig, esm = _e.esm, cjs = _e.cjs, umd = _e.umd, outFile = _e.outFile, _f = _e.disableTypeCheck, disableTypeCheck = _f === void 0 ? false : _f, _g = _e.extraTypescriptPluginOpt, extraTypescriptPluginOpt = _g === void 0 ? {} : _g, _h = _e.extraRollupPlugins, extraRollupPlugins = _h === void 0 ? [] : _h, extraNodeResolvePluginOpt = _e.extraNodeResolvePluginOpt, extraReplacePluginOpts = _e.extraReplacePluginOpts, extraInjectPluginOpts = _e.extraInjectPluginOpts, include = _e.include, _j = _e.target, target = _j === void 0 ? 'browser' : _j, _k = _e.extraPostCssPluginOpt, extraPostCssPluginOpt = _k === void 0 ? [] : _k, nodeVersion = _e.nodeVersion, _l = _e.extractCSS, extractCSS = _l === void 0 ? false : _l, _m = _e.injectCSS, injectCSS = _m === void 0 ? true : _m, cssModule = _e.cssModule, extraPostCssOpt = _e.extraPostCssOpt, autoprefixerOpts = _e.autoprefixerOpts, rollupSassOpt = _e.rollupSassOpt, rollupLessOpt = _e.rollupLessOpt, runtimeHelpers = _e.runtimeHelpers, extraBabelPlugins = _e.extraBabelPlugins, extraBabelPresets = _e.extraBabelPresets, _o = _e.extraExternal, extraExternal = _o === void 0 ? [] : _o;
    var external = __spreadArray(__spreadArray([], getExternal({ cwd: cwd, formatType: type })), extraExternal);
    var extensions = ['.js', '.jsx', '.ts', '.tsx', '.es6', '.es', '.mjs'];
    var entryExt = path_1.default.extname(entry);
    var isTypeScript = entryExt === '.ts' || entryExt === '.tsx';
    var pkg = avenger_utils_1.getPackageJson(cwd);
    if (isTypeScript) {
        var tsConfigFile = avenger_utils_1.getExistFile({
            cwd: cwd,
            files: ['tsconfig.json'],
            returnRelative: false,
        });
        if (!tsConfigFile) {
            avenger_utils_1.error('未找到 tsconfig.json 文件');
            process.exit(1);
        }
    }
    var outFileName = outFile || path_1.default.basename(entry, entryExt);
    var output = {};
    var plugins = [];
    var input = path_1.default.join(cwd, entry);
    var terserOpts = {
        compress: {
            pure_getters: true,
            unsafe: true,
            unsafe_comps: true,
        },
        output: { comments: false },
        ecma: 5,
    };
    function getPlugin(getPluginOpt) {
        var _a = (getPluginOpt || {}).minimizeCss, minimizeCss = _a === void 0 ? false : _a;
        var runtimeH = type === avenger_shared_1.BundleOutTypeMap.cjs ? false : runtimeHelpers;
        var getBablePluginOpt = function () {
            var _a, _b;
            var config = babel_1.getBabelConfig({
                target: type === 'esm' ? 'browser' : target,
                type: type,
                nodeVersion: nodeVersion,
                typescript: true,
                runtimeHelpers: runtimeH,
            }).config;
            if (extraBabelPlugins && extraBabelPlugins.length > 0)
                (_a = config.plugins).push.apply(_a, extraBabelPlugins);
            if (extraBabelPresets && extraBabelPresets.length > 0)
                (_b = config.presets).push.apply(_b, extraBabelPresets);
            var ret = __assign(__assign({}, config), { babelHelpers: runtimeH ? 'runtime' : 'bundled', exclude: /\/node_modules\//, babelrc: false, extensions: extensions });
            return ret;
        };
        var babelPluOpt = getBablePluginOpt();
        var tsPlugin = isTypeScript
            ? [
                rollup_plugin_typescript2_1.default(__assign({ cwd: cwd, clean: true, tsconfig: path_1.default.join(cwd, 'tsconfig.json'), cacheRoot: temp_dir_1.default + "/.rollup_plugin_typescript2_cache", useTsconfigDeclarationDir: true, tsconfigDefaults: {
                        compilerOptions: {
                            declaration: true,
                            declarationDir: 'dist/types',
                        },
                    }, tsconfigOverride: {
                        compilerOptions: {
                            module: 'ES2015',
                        },
                    }, check: !disableTypeCheck }, (extraTypescriptPluginOpt || {}))),
            ]
            : [];
        var hasReplace = extraReplacePluginOpts && Object.keys(extraReplacePluginOpts || {}).length > 0;
        var hasInject = extraInjectPluginOpts && Object.keys(extraInjectPluginOpts || {}).length > 0;
        var postCssPluOpt = __assign(__assign(__assign({ extract: extractCSS, inject: injectCSS, modules: cssModule, minimize: minimizeCss }, (cssModule ? { autoModules: false } : {})), { use: {
                less: __assign({ plugins: [new less_plugin_npm_import_1.default({ prefix: '~' })], javascriptEnabled: true }, rollupLessOpt),
                sass: __assign({}, rollupSassOpt),
                stylus: false,
            }, plugins: __spreadArray([autoprefixer_1.default(__assign({ remove: false }, autoprefixerOpts))], extraPostCssPluginOpt) }), extraPostCssOpt);
        return __spreadArray(__spreadArray(__spreadArray(__spreadArray(__spreadArray([
            plugin_url_1.default(),
            rollup_1.default(),
            rollup_plugin_postcss_1.default(postCssPluOpt),
            plugin_commonjs_1.default({ include: include }),
            plugin_node_resolve_1.default(__assign({ mainFields: ['module', 'jsnext:main', 'main'], extensions: extensions }, extraNodeResolvePluginOpt))
        ], tsPlugin), [
            plugin_babel_1.default(babelPluOpt),
            plugin_json_1.default()
        ]), (hasReplace ? [plugin_replace_1.default(__assign({}, extraReplacePluginOpts))] : [])), (hasInject ? [plugin_inject_1.default(__assign({}, extraInjectPluginOpts))] : [])), extraRollupPlugins);
    }
    var umdOutput = {
        format: type,
        sourcemap: umd && umd.sourcemap,
        file: path_1.default.join(cwd, "dist/" + ((umd && umd.outFile) || "" + outFileName) + ".umd.js"),
        name: (umd && umd.name) || (pkg.name && avenger_utils_1.lodash.camelCase(path_1.default.basename(pkg.name))),
        globals: umd && umd.globals,
    };
    var treeshakeOpt = {
        propertyReadSideEffects: false,
    };
    switch (type) {
        case avenger_shared_1.BundleOutTypeMap.umd:
            return __spreadArray([
                {
                    input: input,
                    output: __assign({}, umdOutput),
                    treeshake: treeshakeOpt,
                    plugins: __spreadArray(__spreadArray([], getPlugin()), [
                        plugin_replace_1.default({
                            'process.env.NODE_ENV': JSON.stringify('development'),
                        }),
                    ]),
                    external: external,
                }
            ], (umd && umd.minFile
                ? [
                    {
                        input: input,
                        output: __assign(__assign({}, umdOutput), { file: path_1.default.join(cwd, "dist/" + ((umd && umd.outFile) || "" + outFileName) + ".umd.min.js") }),
                        plugins: __spreadArray(__spreadArray([], getPlugin({ minimizeCss: true })), [
                            plugin_replace_1.default({
                                'process.env.NODE_ENV': JSON.stringify('production'),
                            }),
                            rollup_plugin_terser_1.terser(terserOpts),
                        ]),
                        external: external,
                    },
                ]
                : []));
        case avenger_shared_1.BundleOutTypeMap.cjs:
            output = {
                format: type,
                sourcemap: cjs && cjs.sourcemap,
                file: path_1.default.join(cwd, "dist/" + ((cjs && cjs.outFile) || "" + outFileName) + ".js"),
            };
            plugins = __spreadArray(__spreadArray([], getPlugin({ minimizeCss: (_a = cjs) === null || _a === void 0 ? void 0 : _a.minify })), (((_b = cjs) === null || _b === void 0 ? void 0 : _b.minify) ? [rollup_plugin_terser_1.terser(terserOpts)] : []));
            return [{ output: output, input: input, plugins: plugins, external: external, treeshake: treeshakeOpt }];
        case avenger_shared_1.BundleOutTypeMap.esm:
            output = {
                format: type,
                sourcemap: esm && esm.sourcemap,
                file: path_1.default.join(cwd, "dist/" + ((esm && esm.outFile) || outFileName + ".esm") + ".js"),
            };
            plugins = __spreadArray([], getPlugin({ minimizeCss: (_c = esm) === null || _c === void 0 ? void 0 : _c.minify }));
            return [{ output: output, input: input, plugins: plugins, external: external, treeshake: treeshakeOpt }];
        default:
            throw new Error("Unsupported type " + type);
    }
};
exports.getRollupConfig = getRollupConfig;
//# sourceMappingURL=rollup.js.map