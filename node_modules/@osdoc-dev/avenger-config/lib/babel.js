"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBabelConfig = void 0;
var getBabelConfig = function (opt) {
    var _a = opt || {}, target = _a.target, _b = _a.nodeVersion, nodeVersion = _b === void 0 ? 6 : _b, type = _a.type, typescript = _a.typescript, runtimeHelpers = _a.runtimeHelpers;
    var isBrowser = target === 'browser';
    var targets = isBrowser ? { browsers: ['last 2 versions', 'IE 10'] } : { node: nodeVersion };
    var presets = __spreadArray(__spreadArray(__spreadArray([], (typescript ? [require.resolve('@babel/preset-typescript')] : [])), [
        [
            require.resolve('@babel/preset-env'),
            {
                targets: targets,
                modules: type === 'esm' ? false : 'auto',
            },
        ]
    ]), (isBrowser ? [require.resolve('@babel/preset-react')] : []));
    var plugins = __spreadArray([
        require.resolve('babel-plugin-react-require'),
        require.resolve('@babel/plugin-syntax-dynamic-import'),
        require.resolve('@babel/plugin-proposal-export-default-from'),
        require.resolve('@babel/plugin-proposal-export-namespace-from'),
        require.resolve('@babel/plugin-proposal-do-expressions'),
        require.resolve('@babel/plugin-proposal-nullish-coalescing-operator'),
        require.resolve('@babel/plugin-proposal-optional-chaining'),
        [require.resolve('@babel/plugin-proposal-decorators'), { legacy: true }],
        [require.resolve('@babel/plugin-proposal-class-properties'), { loose: true }]
    ], (runtimeHelpers
        ? [
            [
                require.resolve('@babel/plugin-transform-runtime'),
                {
                    useESModules: isBrowser && type === 'esm',
                    version: require('@babel/runtime/package.json').version,
                },
            ],
        ]
        : []));
    return {
        config: {
            presets: presets,
            plugins: plugins,
        },
    };
};
exports.getBabelConfig = getBabelConfig;
//# sourceMappingURL=babel.js.map