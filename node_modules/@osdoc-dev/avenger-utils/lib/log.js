"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearConsole = exports.error = exports.warn = exports.done = exports.info = exports.log = void 0;
var readline_1 = __importDefault(require("readline"));
var strip_ansi_1 = __importDefault(require("strip-ansi"));
var chalk_1 = __importDefault(require("chalk"));
var format = function (label, message) {
    return message
        .split('\n')
        .map(function (line, index) { return (index === 0 ? label + " " + line : line.padStart(strip_ansi_1.default(label).length + line.length + 1)); })
        .join('\n');
};
var chalkTag = function (message) { return chalk_1.default.bgBlackBright.white.dim(" " + message + " "); };
var log = function (message, tag) {
    if (message === void 0) { message = ''; }
    if (tag === void 0) { tag = null; }
    tag ? console.log(format(chalkTag(tag), message)) : console.log(" \uD83C\uDF00 " + message);
};
exports.log = log;
var info = function (message, tag) {
    if (tag === void 0) { tag = null; }
    console.log(format(chalk_1.default.bgBlue.black(' INFO ') + (tag ? chalkTag(tag) : ' ðŸŒˆ'), message));
};
exports.info = info;
var done = function (message, tag) {
    if (tag === void 0) { tag = null; }
    console.log(format(chalk_1.default.bgGreen.black(' DONE ') + (tag ? chalkTag(tag) : ' ðŸŽ‰'), message));
};
exports.done = done;
var warn = function (message, tag) {
    if (tag === void 0) { tag = null; }
    console.warn(format(chalk_1.default.bgYellow.black(' WARN ') + (tag ? chalkTag(tag) : ' â˜”'), chalk_1.default.yellow(message)));
};
exports.warn = warn;
var error = function (message, tag) {
    if (tag === void 0) { tag = null; }
    console.error(format(chalk_1.default.bgRed(' ERROR ') + (tag ? chalkTag(tag) : ' ðŸ”¥'), chalk_1.default.red(message)));
    if (message instanceof Error)
        console.error(message.stack);
};
exports.error = error;
var clearConsole = function (title) {
    if (process.stdout.isTTY) {
        var blank = '\n'.repeat(process.stdout.rows);
        console.log(blank);
        readline_1.default.cursorTo(process.stdout, 0, 0);
        readline_1.default.clearScreenDown(process.stdout);
        if (title)
            console.log(title);
    }
};
exports.clearConsole = clearConsole;
//# sourceMappingURL=log.js.map