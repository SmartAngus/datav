"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
var path_1 = __importDefault(require("path"));
var avenger_shared_1 = require("@osdoc-dev/avenger-shared");
var validate_npm_package_name_1 = __importDefault(require("validate-npm-package-name"));
var avenger_utils_1 = require("@osdoc-dev/avenger-utils");
var author_1 = require("./author");
var UserConfig = {
    Jest: 'Jest',
    Lerna: 'Lerna',
    CommitLint: 'CommitLint',
};
var setLintConfig = function (deps, packageJsonData, currentTemplate) { return __awaiter(void 0, void 0, void 0, function () {
    var _a;
    return __generator(this, function (_b) {
        packageJsonData.husky = {
            hooks: __assign(__assign({}, (_a = packageJsonData === null || packageJsonData === void 0 ? void 0 : packageJsonData.husky) === null || _a === void 0 ? void 0 : _a.hooks), { 'pre-commit': 'lint-staged' }),
        };
        packageJsonData['lint-staged'] = {
            '*.{js,json,md,tsx,ts}': ['prettier --write', 'git add'],
            '*.ts?(x)': ['prettier --write', 'eslint --fix', 'git add'],
        };
        deps.push.apply(deps, ['@osdoc-dev/eslint-config-preset-prettier', 'lint-staged', 'prettier']);
        if (currentTemplate === avenger_shared_1.CreateProjectType.basic)
            deps.push.apply(deps, ['@osdoc-dev/eslint-config-preset-ts']);
        if (currentTemplate === avenger_shared_1.CreateProjectType.react)
            deps.push.apply(deps, ['@osdoc-dev/eslint-config-preset-react']);
        return [2];
    });
}); };
var getTemplate = function (template) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (template)
            return [2, { currentTemplate: template }];
        return [2, avenger_utils_1.inquirer.prompt({
                type: 'list',
                message: '请选择项目模版:',
                name: 'currentTemplate',
                choices: Object.keys(avenger_shared_1.CreateProjectType).map(function (v) { return v; }) || [],
            })];
    });
}); };
var getUserAuthor = function () {
    return avenger_utils_1.inquirer.prompt({
        type: 'input',
        message: '请输入项目作者名:',
        name: 'name',
    });
};
var getUserConfig = function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, avenger_utils_1.inquirer.prompt([
                {
                    name: 'choose',
                    type: 'checkbox',
                    message: '选择拓展预设配置',
                    choices: [
                        { name: 'Jest', value: UserConfig.Jest },
                        { name: 'Lerna', value: UserConfig.Lerna },
                        { name: 'CommitLint', value: UserConfig.CommitLint },
                    ],
                },
            ])];
    });
}); };
var setJestConfig = function (choose, ignores, deps) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (choose.includes(UserConfig.Jest))
            deps.push.apply(deps, ['jest', 'ts-jest', '@types/jest']);
        else
            ignores.push.apply(ignores, ['jest.config.js']);
        return [2];
    });
}); };
var setCommitLintConfig = function (choose, deps, packageJsonData, ignores) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (choose.includes(UserConfig.CommitLint)) {
            packageJsonData.husky = __assign(__assign({}, packageJsonData === null || packageJsonData === void 0 ? void 0 : packageJsonData.husky), { hooks: {
                    'commit-msg': 'commitlint -E HUSKY_GIT_PARAMS',
                } });
            packageJsonData.config = {
                commitizen: {
                    path: 'node_modules/cz-customizable',
                },
            };
            deps.push.apply(deps, [
                '@commitlint/cli',
                '@commitlint/config-conventional',
                'husky',
                'commitizen',
                'cz-customizable',
                'conventional-changelog-cli',
            ]);
        }
        else {
            ignores.push.apply(ignores, ['commitlint.config.js', '.cz-config.js']);
        }
        return [2];
    });
}); };
var getInitPackageJson = function (template, author, currentName) {
    var _a;
    var common = {
        name: currentName,
        version: '0.1.0',
        license: 'MIT',
        author: author,
        main: 'dist/index.js',
        module: 'dist/index.esm.js',
        files: ['dist'],
    };
    var depMap = (_a = {},
        _a[avenger_shared_1.CreateProjectType.basic] = { json: __assign({}, common), deps: [] },
        _a[avenger_shared_1.CreateProjectType.react] = {
            json: __assign(__assign({}, common), { peerDependencies: {
                    react: '>=16',
                } }),
            deps: ['react', 'react-dom', '@types/react', '@types/react-dom'],
        },
        _a);
    return depMap[template];
};
var setPackageJsonFile = function (currentName, choose, targetDir, packageJsonData, deps, template, author) { return __awaiter(void 0, void 0, void 0, function () {
    var filePath, _a, _b, initDeps, initJson, json, data;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                avenger_utils_1.info('初始化package.json...');
                filePath = targetDir + "/package.json";
                _a = getInitPackageJson(template, author, currentName), _b = _a.deps, initDeps = _b === void 0 ? [] : _b, initJson = _a.json;
                return [4, avenger_utils_1.fs.writeJSON(filePath, __assign({}, initJson), { spaces: 2 })];
            case 1:
                _c.sent();
                avenger_utils_1.info('开始安装开发依赖...! ');
                avenger_utils_1.info("\u6267\u884C\uFF1Ayarn add  " + __spreadArray(__spreadArray([], initDeps), deps).join(' ') + " -D");
                avenger_utils_1.shelljs.exec("yarn add " + __spreadArray(__spreadArray([], initDeps), deps).join(' ') + " -D", { cwd: targetDir });
                avenger_utils_1.info('开发依赖安装完成');
                return [4, avenger_utils_1.fs.readJSON(filePath)];
            case 2:
                json = (_c.sent());
                data = {
                    test: 'jest',
                    clean: 'rm -rf ./dist',
                    build: 'yarn clean && avenger build',
                    'build:w': 'yarn clean && avenger build --watch',
                    'check-types': 'tsc --noEmit',
                    commit: 'git cz',
                    lint: "prettier --check '**/*.{js,json,md,tsx,ts}'",
                };
                if (choose.includes(UserConfig.Lerna))
                    data.bootstrap = 'lerna bootstrap';
                if (choose.includes(UserConfig.CommitLint))
                    data.changelog = 'conventional-changelog -p angular -i CHANGELOG.md -s -r 0';
                json.scripts = data;
                return [4, avenger_utils_1.fs.writeJSON(filePath, __assign(__assign({}, json), packageJsonData), { spaces: 2 })];
            case 3:
                _c.sent();
                if (!choose.includes(UserConfig.Lerna)) return [3, 5];
                avenger_utils_1.info('检测到启动lerna');
                return [4, avenger_utils_1.shelljs.exec('npx lerna init', { cwd: targetDir })];
            case 4:
                _c.sent();
                avenger_utils_1.info('lerna 初始化完成');
                _c.label = 5;
            case 5:
                avenger_utils_1.info('环境依赖初始化成功!');
                return [2];
        }
    });
}); };
var setLernaConfig = function (choose, deps) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (choose.includes(UserConfig.Lerna))
            deps.push.apply(deps, ['lerna']);
        return [2];
    });
}); };
var setGitConfig = function (name, git) { return __awaiter(void 0, void 0, void 0, function () {
    var error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!git) return [3, 10];
                _a.label = 1;
            case 1:
                _a.trys.push([1, 9, , 10]);
                avenger_utils_1.info('进行 Git 初始化提交');
                return [4, avenger_utils_1.shelljs.exec("cd " + name)];
            case 2:
                _a.sent();
                return [4, avenger_utils_1.shelljs.exec('git init')];
            case 3:
                _a.sent();
                return [4, avenger_utils_1.shelljs.exec('git add .')];
            case 4:
                _a.sent();
                return [4, avenger_utils_1.shelljs.exec('git commit -m "chore:first commit"')];
            case 5:
                _a.sent();
                return [4, avenger_utils_1.shelljs.exec('git branch -M master')];
            case 6:
                _a.sent();
                return [4, avenger_utils_1.shelljs.exec("git remote add origin " + git)];
            case 7:
                _a.sent();
                return [4, avenger_utils_1.shelljs.exec('git push -u origin master')];
            case 8:
                _a.sent();
                avenger_utils_1.info('Git 初始化提交完成');
                return [3, 10];
            case 9:
                error_1 = _a.sent();
                avenger_utils_1.error("Error: " + error_1);
                return [3, 10];
            case 10: return [2];
        }
    });
}); };
var create = function (opt) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, name, options, _b, force, template, git, cwd, inCurrent, currentName, targetDir, result, ok, action, deps, packageJsonData, ignores, currentTemplate, author, authorName, _c, choose;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = opt || {}, name = _a.name, options = _a.options;
                _b = options || {}, force = _b.force, template = _b.template, git = _b.git;
                cwd = process.cwd();
                inCurrent = !name || name === '.';
                currentName = inCurrent ? path_1.default.relative('../', cwd) : name;
                targetDir = path_1.default.resolve(cwd, inCurrent ? '' : currentName || '.');
                return [4, validate_npm_package_name_1.default(currentName)];
            case 1:
                result = _d.sent();
                if (!result.validForNewPackages) {
                    avenger_utils_1.error("\u65E0\u6548\u9879\u76EE\u540D\u79F0: \"" + name + "\"");
                    avenger_utils_1.lodash.forEach(result.errors, function (err) {
                        avenger_utils_1.error("Error: " + err);
                    });
                    avenger_utils_1.lodash.forEach(result.warnings, function (warn) {
                        avenger_utils_1.warn("Error: " + warn);
                    });
                    process.exit(1);
                }
                if (force)
                    avenger_utils_1.deleteFolder(targetDir);
                if (!(avenger_utils_1.fs.existsSync(targetDir) && !force)) return [3, 7];
                avenger_utils_1.clearConsole();
                if (!inCurrent) return [3, 3];
                return [4, avenger_utils_1.inquirer.prompt([
                        {
                            name: 'ok',
                            type: 'confirm',
                            message: "\u662F\u5426\u5728\u5F53\u524D " + targetDir + " \u6587\u4EF6\u5939\u4E2D\u521B\u5EFA\u9879\u76EE",
                        },
                    ])];
            case 2:
                ok = (_d.sent()).ok;
                if (!ok)
                    return [2];
                return [3, 7];
            case 3: return [4, avenger_utils_1.inquirer.prompt([
                    {
                        name: 'action',
                        type: 'list',
                        message: "\u5F53\u524D\u6587\u4EF6\u5939 " + targetDir + " \u5DF2\u5B58\u5728, \u662F\u5426\u8986\u76D6\u91CD\u5199",
                        choices: [
                            { name: '确定', value: true },
                            { name: '取消', value: false },
                        ],
                    },
                ])];
            case 4:
                action = (_d.sent()).action;
                if (!action) return [3, 6];
                avenger_utils_1.info("\u5220\u9664\u4E2D  " + targetDir + "...");
                return [4, avenger_utils_1.fs.remove(targetDir)];
            case 5:
                _d.sent();
                return [3, 7];
            case 6:
                process.exit(1);
                _d.label = 7;
            case 7:
                deps = ['typescript', '@osdoc-dev/avenger-cli'];
                packageJsonData = {};
                ignores = [];
                return [4, avenger_utils_1.createFolder(targetDir)];
            case 8:
                _d.sent();
                return [4, getTemplate(template)];
            case 9:
                currentTemplate = (_d.sent()).currentTemplate;
                author = author_1.getAuthorName();
                if (!!author) return [3, 11];
                return [4, getUserAuthor()];
            case 10:
                authorName = (_d.sent()).name;
                author = authorName;
                author_1.setAuthorName(authorName);
                _d.label = 11;
            case 11: return [4, getUserConfig()];
            case 12:
                _c = (_d.sent()).choose, choose = _c === void 0 ? [] : _c;
                return [4, setCommitLintConfig(choose, deps, packageJsonData, ignores)];
            case 13:
                _d.sent();
                return [4, setLintConfig(deps, packageJsonData, currentTemplate)];
            case 14:
                _d.sent();
                return [4, setJestConfig(choose, ignores, deps)];
            case 15:
                _d.sent();
                return [4, setLernaConfig(choose, deps)];
            case 16:
                _d.sent();
                return [4, avenger_utils_1.fileGenerator({
                        target: targetDir,
                        source: path_1.default.join(__dirname, '../templates/common'),
                        context: {
                            year: new Date().getFullYear(),
                            author: author,
                        },
                        ignores: ignores,
                    })];
            case 17:
                _d.sent();
                return [4, avenger_utils_1.fileGenerator({
                        target: targetDir,
                        source: path_1.default.join(__dirname, "../templates/" + currentTemplate),
                        context: {
                            currentName: currentName,
                            enableJest: choose.includes(UserConfig.Jest),
                        },
                        ignores: ignores,
                    })];
            case 18:
                _d.sent();
                return [4, setPackageJsonFile(currentName, choose, targetDir, packageJsonData, deps, currentTemplate, author)];
            case 19:
                _d.sent();
                return [4, setGitConfig(currentName, git)];
            case 20:
                _d.sent();
                avenger_utils_1.info("\u8BF7\u8FDB\u5165\u9879\u76EE\u5185\u8FDB\u884C\u64CD\u4F5C cd " + currentName + " && yarn install");
                return [2];
        }
    });
}); };
exports.create = create;
//# sourceMappingURL=create.js.map