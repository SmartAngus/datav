"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerCommand = void 0;
var path_1 = __importDefault(require("path"));
var commander_1 = __importDefault(require("commander"));
var avenger_utils_1 = require("@osdoc-dev/avenger-utils");
var avenger_core_1 = require("@osdoc-dev/avenger-core");
var envinfo_1 = __importDefault(require("envinfo"));
var avenger_shared_1 = require("@osdoc-dev/avenger-shared");
var common_1 = require("./common");
var registerCommand = function () {
    var packageJson = avenger_utils_1.getPackageJson(path_1.default.join(__dirname, '..'));
    commander_1.default.version(packageJson.name + " v" + packageJson.version);
    commander_1.default
        .command('build')
        .description('打包')
        .option('--file', '打包输出文件名')
        .option('--entry', '打包主入口')
        .option('--watch', 'watch 模式')
        .option('--esm', '打包esm')
        .option('--cjs', '打包cjs')
        .option('--umd', '打包umd')
        .action(function () { return avenger_core_1.build(common_1.getBuildArguments()); });
    commander_1.default
        .command('create [name]')
        .description('创建一个新项目')
        .option('--force', '强制覆盖已存在文件夹')
        .option('--git', '是否初始化Git，填写Git地址')
        .option('--template', "\u521B\u5EFA\u6A21\u7248\u9879\u76EE,\u53EF\u9009\u9879\uFF1A[ " + Object.keys(avenger_shared_1.CreateProjectType).join(', ') + " ]")
        .action(function () { return avenger_core_1.create(common_1.getCreateArguments()); });
    commander_1.default
        .command('info')
        .description('环境信息')
        .action(function () {
        console.log(avenger_utils_1.chalk.bold('\nEnvironment Info:'));
        envinfo_1.default
            .run({
            System: ['OS', 'CPU'],
            Binaries: ['Node', 'Yarn', 'npm'],
            Browsers: ['Chrome', 'Edge', 'Firefox', 'Safari'],
            npmPackages: '/**/{typescript,*@osdoc-dev*,@osdoc-dev/*/}',
            npmGlobalPackages: [packageJson.name],
        }, {
            showNotFound: true,
            duplicates: true,
            fullTree: true,
        })
            .then(console.log);
    });
    commander_1.default.parse(process.argv);
};
exports.registerCommand = registerCommand;
//# sourceMappingURL=command.js.map