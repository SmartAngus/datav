export declare type TBundleType = 'rollup' | 'babel';
export declare type TBundleOutType = 'esm' | 'cjs' | 'umd';
export interface IBundleOutTypeMapProps {
    [propName: string]: TBundleOutType;
}
export interface IStringObject {
    [prop: string]: string;
}
export interface IBundleOutType {
    type: TBundleType;
    outFile?: string;
}
export interface IEsmOpt extends IBundleOutType {
    minify?: boolean;
    sourcemap?: boolean;
}
export interface ICjsOpt extends IBundleOutType {
    minify?: boolean;
    sourcemap?: boolean;
}
export interface IUmdOpt {
    name: string;
    sourcemap?: boolean;
    minFile?: boolean;
    outFile?: string;
    globals?: IStringObject;
}
export interface IBuildConfigOpt {
    entry?: string;
    outFile?: string;
    esm?: TBundleType | IEsmOpt | false;
    cjs?: TBundleType | ICjsOpt | false;
    umd?: IUmdOpt | false;
    disableTypeCheck?: boolean;
    target?: 'node' | 'browser';
    nodeVersion?: number;
    extraTypescriptPluginOpt?: Object;
    extraRollupPlugins?: any[];
    extraNodeResolvePluginOpt?: Object;
    include?: string;
    extraReplacePluginOpts?: Object;
    extraInjectPluginOpts?: Object;
    extraPostCssPluginOpt?: Object[];
    extraPostCssOpt?: Object;
    autoprefixerOpts?: Object;
    extractCSS?: boolean;
    cssModule?: boolean | Record<string, any>;
    injectCSS?: boolean;
    rollupSassOpt?: Object;
    rollupLessOpt?: Object;
    runtimeHelpers?: boolean;
    extraBabelPlugins?: any[];
    extraBabelPresets?: any[];
    extraExternal?: string[];
}
export interface IRollupBuildOpt {
    cwd: string;
    entry: string;
    type: TBundleOutType;
    buildConfig: IBuildConfigOpt;
    watch?: boolean;
}
export interface ICliOpt {
    watch?: boolean;
    cwd?: string;
    inlineConfig?: IBuildConfigOpt;
}
export interface IRollupOptions {
    entry?: string;
}
export interface IGetBabelConfigProps {
    target: 'browser' | 'node';
    nodeVersion?: number;
    type?: TBundleOutType;
    typescript?: boolean;
    runtimeHelpers?: boolean;
}
export interface IObjectProps {
    [propName: string]: string;
}
export interface IPackageJson {
    dependencies?: Object;
    peerDependencies?: Object;
    name?: string;
    scripts: any;
}
export interface ICreateOptions {
    force?: boolean;
    template?: string;
    git?: string;
}
export interface ICreateOpt {
    name: string;
    options?: ICreateOptions;
}
export interface IPackageJsonData {
    [key: string]: any;
}
//# sourceMappingURL=types.d.ts.map