import { Pen } from './pen';
import { Rect } from './rect';
import { Point } from './point';
import { Direction } from './direction';
export declare class Node extends Pen {
    is3D: boolean;
    z: number;
    zRotate: number;
    borderRadius: number;
    icon: string;
    iconFamily: string;
    iconSize: number;
    iconColor: string;
    iconRotate: number;
    image: string;
    lastImage: string;
    imgNaturalWidth: number;
    imgNaturalHeight: number;
    imageWidth: number;
    imageHeight: number;
    imageRatio: boolean;
    imageAlign: string;
    imageHide: boolean;
    img: HTMLImageElement;
    bkType: number;
    gradientFromColor: string;
    gradientToColor: string;
    gradientAngle: number;
    gradientRadius: number;
    paddingTop: number | string;
    paddingBottom: number | string;
    paddingLeft: number | string;
    paddingRight: number | string;
    disableSizeX?: boolean;
    disableSizeY?: boolean;
    iconRect: Rect;
    fullIconRect: Rect;
    points: Point[];
    anchors: Point[];
    manualAnchors: Point[];
    rotatedAnchors: Point[];
    get dockWatchers(): Point[];
    set dockWatchers(v: Point[]);
    animateDuration: number;
    animateFrames: {
        duration: number;
        start?: number;
        end?: number;
        initState?: Node;
        linear: boolean;
        state: Node;
        offsetRect: Rect;
    }[];
    animateAlone: boolean;
    animateReady: Node;
    animateFrame: number;
    private _animateFrame;
    private _animatePos;
    gif: boolean;
    video: string;
    audio: string;
    playType: number;
    playLoop: boolean;
    nextPlay: string;
    iframe: string;
    elementId: string;
    elementLoaded: any;
    elementRendered: boolean;
    constructor(json: any, cloneState?: boolean);
    static cloneState(json: any): Node;
    restore(state?: Node): void;
    checkData(): void;
    init(cloneState?: boolean): void;
    addToDiv(): void;
    removeFromDiv(): void;
    hasGif(): boolean;
    calcAbsPadding(): void;
    draw(ctx: CanvasRenderingContext2D): void;
    strokeLinearGradient(ctx: CanvasRenderingContext2D): void;
    drawBkLinearGradient(ctx: CanvasRenderingContext2D): void;
    drawBkRadialGradient(ctx: CanvasRenderingContext2D): void;
    drawImg(ctx: CanvasRenderingContext2D): void;
    calcAnchors(): void;
    calcRotateAnchors(angle?: number): void;
    getTextRect(): Rect;
    getIconRect(): Rect;
    calcRectByParent(parent: Pen): void;
    calcChildrenRect(): void;
    calcRectInParent(parent: Pen): void;
    initAnimate(): void;
    pauseAnimate(): void;
    stopAnimate(): void;
    animate(now: number): void;
    scale(scale: number, center?: {
        x: number;
        y: number;
    }): void;
    scalePoints(scaleX?: number, scaleY?: number): void;
    translate(x: number, y: number): void;
    initRect(): void;
    pushPoint(pt: Point): void;
    nearestAnchor(pt: Point): {
        index: number;
        direction: Direction;
    };
    hitInSelf(point: {
        x: number;
        y: number;
    }, padding?: number): boolean;
    hit(pt: {
        x: number;
        y: number;
    }, padding?: number): any;
    round(): void;
    clone(): Node;
}
